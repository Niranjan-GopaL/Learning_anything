/*
    Implementation of Miler-Rabin Primality Test.

*/
import { expmod } from './pow_mod.js';
import { get_random_number_in_range } from './cryptographic_randrange.js';



const is_prime_single_test  = (n) => {   
    // console.log("------------------- NEW TEST -----------------------------")
    n = BigInt(n); 
    var exp = n - 1n;
    // console.log(n)
    // console.log(exp)

    var a = BigInt(get_random_number_in_range(2n, n - 1n))
    // console.log(a)

    while (!(exp & 1n)) {
        exp >>= 1n;
        // console.log(exp)
    }
    
    if ( expmod(a, exp, n) === 1n) {
        return true;
    }
    
    // console.log("----------------------------")
    while (exp < n - 1n) {
        if (expmod(a, exp, n) ===  n - 1n) {
            // console.log(`THIS IS n-1 ${n - 1n}`)
            return true;
        }

        // console.log(exp)
        exp <<= 1n;
    }
    
    return false
    // console.log("----------------------------")
}

export const is_prime = (n,k=40) => {
    for(var i = 0; i < k; i++)
        if (!(is_prime_single_test(n)))
            return false
    return true
}


// console.log(is_prime(99991));
// console.log(is_prime(999983));
// console.log(is_prime(1000000021));
// console.log(is_prime(3240317186086471));


// <<------------------------------------------------------------------------------------------------------------------------->>
// from now on we'll have to deal with Javascript's 
// inherent inability ( Double float precision can only go so far)


// console.log(is_prime("7422672549820012913470945794268730760749"));
// fucking 100 digit prime


// fucking 300 digit prime
console.log(is_prime("346758748025792390225380275000181756378730579900007168209951637358300277165350080880999452532792907929795902811841855543133403735847987130548644203775361529916428719930065730056064985083427375930677967953588210003889994895602452352457352989454314331097994085272795902583737965590172925121583180807193"));


// fucking 700 digit prime
// console.log(is_prime("7986620365176818924518149606783700765312494582932675356134239881552052358322089417469149017972658189908304391078951006522237351586295065821226980694355614902825714792811536109698807894152996427721119295699819336912246095288979575787777135348901348264403706042094480844276167155877270519316758775714087353954078753831776159276347568702526570878304884589635669072480725680595940580994811643565296023435311776778408086201381081359584329437736535838484694946680947634940211578808085873398172135127330426897015368566473518012446282769566147507258686560208899122344644779718961303700638089027543691665648176741478087927229393509394551121302478023166480347464166492771901592083302764404570185368372914609597"));


// fucking 1000 digit prime
// console.log(is_prime("2965492672309184476327603552364584224107272394373915270170417944379408434144488294671295776556053637865439564810805969688991704986047990267098034033935747073247756957956595559712027126870852600612112139524644726428221219963019990149415180014085302302185931659543546938928347625734785401112469962284025349546142882688236124831593428623870198078337372016884900337368622850033657737896691544391951488070023399778234786695233915596318705714391301231348032379431892870443997621657483248715288452854964590147854920259308594390233331561274151887606257180173758368763381500487758790616113692523292666372563113890082345388184531696616943717927506001034240664405743081903072716055736472475183138805043824185384924178992420586350152553104828998266456337784685652347483128521758035024627429097637650999650120868122666604104973034219982290359330619232339555149888277415270322777098039636561152766215094423181359269001545464568839780355534112581935666865307107164339578231101910463523943294164396593613483184736529"));
// Took 17seconds but worked


// fucking 2049 digit prime
// console.log(is_prime("197546673332218830416810654295313094666434639654984169656802028169564498546927842524992229818432282315757269441186831840556685277341718642793972674012313856823982424617549113618843608780246515888805161779152205419233748691284737328537906008659608146155702186325213761005206295161180654290693616717568385957318776533340057883133762096528559100841753197369262757950013930019583910614223997069203761417340670119405601438194817644978771185382562480133767676598341345911129643445038213490349265314947816780085037344898536913865818629802691578175661645865957482708279271783046048469359133416118046415233725879475088562203883147047569158971677616015626977873438659578071002503641911857552786505530716767936999940012225421834188404519834589063309020094379359263687068757583879308476008591053617147718183794631605190034759419601332449325707755288976988004718153313121801237958562656632894057716642914311183002400391274788854288677931809685402486184999261483422309038172436628981217536326391818730777434461150337615942861783245622780780978948800402746263933278395590874316068571562384490114489857654639992256426769742347312910105331289507650240601600742590242575121104639926552025912465718969293589335497923742434970316819733734414822817956396629529490121677649692106280035553294478753741821946724893760492878609901451031963305419609876982132419731208118588741359422576625614271559138514447711833312343515463351437688966540659233631366507182368362008402666200294474124392153575535261790795492307895277253297503453789682647522267096056324234847098208862342396522467780817107860344922856810701421329694700534190327949179480878636828976751805255702595532044520120933542788053675693620562776394200030288942183678934920346806674478532271420236675838002623083503340328098670821352176509819136505249016227076984956737434918794188439225059054554543828212808868206050710446271074702120799298357880220683708800869261629303539265628916385207737773671278183241066177520324262655174737445472607548498589815643680228901459550917926108910438595388923753641262509249781438661"));


// fucking 3000 digit prime
// console.log(is_prime("197546673332218830416810654295313094666434639654984169656802028169564498546927842524992229818432282315757269441186831840556685277341718642793972674012313856823982424617549113618843608780246515888805161779152205419233748691284737328537906008659608146155702186325213761005206295161180654290693616717568385957318776533340057883133762096528559100841753197369262757950013930019583910614223997069203761417340670119405601438194817644978771185382562480133767676598341345911129643445038213490349265314947816780085037344898536913865818629802691578175661645865957482708279271783046048469359133416118046415233725879475088562203883147047569158971677616015626977873438659578071002503641911857552786505530716767936999940012225421834188404519834589063309020094379359263687068757583879308476008591053617147718183794631605190034759419601332449325707755288976988004718153313121801237958562656632894057716642914311183002400391274788854288677931809685402486184999261483422309038172436628981217536326391818730777434461150337615942861783245622780780978948800402746263933278395590874316068571562384490114489857654639992256426769742347312910105331289507650240601600742590242575121104639926552025912465718969293589335497923742434970316819733734414822817956396629529490121677649692106280035553294478753741821946724893760492878609901451031963305419609876982132419731208118588741359422576625614271559138514447711833312343515463351437688966540659233631366507182368362008402666200294474124392153575535261790795492307895277253297503453789682647522267096056324234847098208862342396522467780817107860344922856810701421329694700534190327949179480878636828976751805255702595532044520120933542788053675693620562776394200030288942183678934920346806674478532271420236675838002623083503340328098670821352176509819136505249016227076984956737434918794188439225059054554543828212808868206050710446271074702120799298357880220683708800869261629303539265628916385207737773671278183241066177520324262655174737445472607548498589815643680228901459550917926108910438595388923753641262509249781438661"));